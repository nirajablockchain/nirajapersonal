import math


class Reward:
    def __init__(self, verbose=False):
        self.first_racingpoint_index = None
        self.verbose = verbose

    def reward_function(self, params):

        # Import package (needed for heading)
        import math

        ################## HELPER FUNCTIONS ###################

        def dist_2_points(x1, x2, y1, y2):
            return abs(abs(x1 - x2) ** 2 + abs(y1 - y2) ** 2) ** 0.5

        def closest_2_racing_points_index(racing_coords, car_coords):

            # Calculate all distances to racing points
            distances = []
            for i in range(len(racing_coords)):
                distance = dist_2_points(x1=racing_coords[i][0], x2=car_coords[0],
                                         y1=racing_coords[i][1], y2=car_coords[1])
                distances.append(distance)

            # Get index of the closest racing point
            closest_index = distances.index(min(distances))

            # Get index of the second closest racing point
            distances_no_closest = distances.copy()
            distances_no_closest[closest_index] = 999
            second_closest_index = distances_no_closest.index(
                min(distances_no_closest))

            return [closest_index, second_closest_index]

        def dist_to_racing_line(closest_coords, second_closest_coords, car_coords):

            # Calculate the distances between 2 closest racing points
            a = abs(dist_2_points(x1=closest_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=closest_coords[1],
                                  y2=second_closest_coords[1]))

            # Distances between car and closest and second closest racing point
            b = abs(dist_2_points(x1=car_coords[0],
                                  x2=closest_coords[0],
                                  y1=car_coords[1],
                                  y2=closest_coords[1]))
            c = abs(dist_2_points(x1=car_coords[0],
                                  x2=second_closest_coords[0],
                                  y1=car_coords[1],
                                  y2=second_closest_coords[1]))

            # Calculate distance between car and racing line (goes through 2 closest racing points)
            # try-except in case a=0 (rare bug in DeepRacer)
            try:
                distance = abs(-(a ** 4) + 2 * (a ** 2) * (b ** 2) + 2 * (a ** 2) * (c ** 2) -
                               (b ** 4) + 2 * (b ** 2) * (c ** 2) - (c ** 4)) ** 0.5 / (2 * a)
            except:
                distance = b

            return distance

        # Calculate which one of the closest racing points is the next one and which one the previous one
        def next_prev_racing_point(closest_coords, second_closest_coords, car_coords, heading):

            # Virtually set the car more into the heading direction
            heading_vector = [math.cos(math.radians(
                heading)), math.sin(math.radians(heading))]
            new_car_coords = [car_coords[0] + heading_vector[0],
                              car_coords[1] + heading_vector[1]]

            # Calculate distance from new car coords to 2 closest racing points
            distance_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                        x2=closest_coords[0],
                                                        y1=new_car_coords[1],
                                                        y2=closest_coords[1])
            distance_second_closest_coords_new = dist_2_points(x1=new_car_coords[0],
                                                               x2=second_closest_coords[0],
                                                               y1=new_car_coords[1],
                                                               y2=second_closest_coords[1])

            if distance_closest_coords_new <= distance_second_closest_coords_new:
                next_point_coords = closest_coords
                prev_point_coords = second_closest_coords
            else:
                next_point_coords = second_closest_coords
                prev_point_coords = closest_coords

            return [next_point_coords, prev_point_coords]

        def racing_direction_diff(closest_coords, second_closest_coords, car_coords, heading):

            # Calculate the direction of the center line based on the closest waypoints
            next_point, prev_point = next_prev_racing_point(closest_coords,
                                                            second_closest_coords,
                                                            car_coords,
                                                            heading)

            # Calculate the direction in radius, arctan2(dy, dx), the result is (-pi, pi) in radians
            track_direction = math.atan2(
                next_point[1] - prev_point[1], next_point[0] - prev_point[0])

            # Convert to degree
            track_direction = math.degrees(track_direction)

            # Calculate the difference between the track direction and the heading direction of the car
            direction_diff = abs(track_direction - heading)
            if direction_diff > 180:
                direction_diff = 360 - direction_diff

            return direction_diff

        # Gives back indexes that lie between start and end index of a cyclical list
        # (start index is included, end index is not)
        def indexes_cyclical(start, end, array_len):

            if end < start:
                end += array_len

            return [index % array_len for index in range(start, end)]

        # Calculate how long car would take for entire lap, if it continued like it did until now
        def projected_time(first_index, closest_index, step_count, times_list):

            # Calculate how much time has passed since start
            current_actual_time = (step_count - 1) / 15

            # Calculate which indexes were already passed
            indexes_traveled = indexes_cyclical(first_index, closest_index, len(times_list))

            # Calculate how much time should have passed if car would have followed optimals
            current_expected_time = sum([times_list[i] for i in indexes_traveled])

            # Calculate how long one entire lap takes if car follows optimals
            total_expected_time = sum(times_list)

            # Calculate how long car would take for entire lap, if it continued like it did until now
            try:
                projected_time = (current_actual_time / current_expected_time) * total_expected_time
            except:
                projected_time = 9999

            return projected_time

        #################### RACING LINE ######################

        # Optimal racing line for the Spain track
        # Each row: [x,y,speed,timeFromPreviousPoint]
        racing_track = [[0.64023, -0.36841, 4.0, 0.07516],
                        [0.93923, -0.39493, 4.0, 0.07504],
                        [1.23777, -0.4197, 4.0, 0.07489],
                        [1.5357, -0.44233, 4.0, 0.0747],
                        [1.83291, -0.46248, 4.0, 0.07447],
                        [2.12922, -0.47972, 4.0, 0.0742],
                        [2.42446, -0.49363, 4.0, 0.07389],
                        [2.71847, -0.50382, 4.0, 0.07355],
                        [3.01111, -0.51003, 4.0, 0.07318],
                        [3.30224, -0.51196, 4.0, 0.07278],
                        [3.59157, -0.50899, 3.69532, 0.0783],
                        [3.87882, -0.5005, 3.27436, 0.08776],
                        [4.16358, -0.48569, 2.87269, 0.09926],
                        [4.44547, -0.46384, 2.5074, 0.11276],
                        [4.72357, -0.43314, 2.18033, 0.12833],
                        [4.9969, -0.39187, 2.18033, 0.12678],
                        [5.26412, -0.33792, 2.18033, 0.12503],
                        [5.52337, -0.26863, 2.18033, 0.12308],
                        [5.7719, -0.18062, 2.18033, 0.12092],
                        [6.00571, -0.06986, 2.18033, 0.11866],
                        [6.21866, 0.06809, 2.19625, 0.11553],
                        [6.40957, 0.22993, 2.41164, 0.10378],
                        [6.58157, 0.40954, 2.41164, 0.10312],
                        [6.73361, 0.60593, 2.44745, 0.10148],
                        [6.86572, 0.81734, 2.44745, 0.10186],
                        [6.97756, 1.04244, 2.44745, 0.1027],
                        [7.06666, 1.28106, 2.65049, 0.0961],
                        [7.13502, 1.5303, 2.83509, 0.09116],
                        [7.18407, 1.788, 2.995, 0.08759],
                        [7.2148, 2.05234, 3.15571, 0.08433],
                        [7.2282, 2.32151, 3.30183, 0.08162],
                        [7.22512, 2.59373, 3.38439, 0.08044],
                        [7.20627, 2.86722, 3.33423, 0.08222],
                        [7.1721, 3.14016, 3.24363, 0.08481],
                        [7.12287, 3.41076, 3.10285, 0.08864],
                        [7.05871, 3.67725, 2.86086, 0.09581],
                        [6.97994, 3.93815, 2.56216, 0.10637],
                        [6.88681, 4.19215, 2.30495, 0.11737],
                        [6.77959, 4.43821, 2.30495, 0.11645],
                        [6.6582, 4.67521, 2.30495, 0.11553],
                        [6.52208, 4.90176, 2.30495, 0.11467],
                        [6.3695, 5.11545, 2.30495, 0.11392],
                        [6.19751, 5.3123, 2.30495, 0.11341],
                        [6.00312, 5.4869, 2.55767, 0.10216],
                        [5.79188, 5.64207, 2.76407, 0.09483],
                        [5.56718, 5.77955, 2.91624, 0.09033],
                        [5.33131, 5.9002, 2.91738, 0.09081],
                        [5.08602, 6.00422, 2.74086, 0.09721],
                        [4.83301, 6.09168, 2.5435, 0.10525],
                        [4.57389, 6.16213, 2.32824, 0.11533],
                        [4.31051, 6.21494, 2.1043, 0.12765],
                        [4.04496, 6.24942, 1.88527, 0.14204],
                        [3.77974, 6.26328, 1.68185, 0.15791],
                        [3.51828, 6.25438, 1.46816, 0.17819],
                        [3.26496, 6.2207, 1.3, 0.19658],
                        [3.02508, 6.16044, 1.3, 0.19026],
                        [2.80478, 6.0723, 1.3, 0.18252],
                        [2.61089, 5.95585, 1.3, 0.17398],
                        [2.45084, 5.81182, 1.3, 0.16562],
                        [2.33507, 5.64173, 1.3, 0.15827],
                        [2.27564, 5.4509, 1.51703, 0.13175],
                        [2.25804, 5.25116, 1.65191, 0.12139],
                        [2.2775, 5.04677, 1.80189, 0.11394],
                        [2.33087, 4.84058, 1.98738, 0.10717],
                        [2.41515, 4.63477, 2.23818, 0.09937],
                        [2.52658, 4.43091, 2.09935, 0.11067],
                        [2.66162, 4.23005, 1.81746, 0.13317],
                        [2.81595, 4.03263, 1.60452, 0.15617],
                        [2.98048, 3.84585, 1.39089, 0.17896],
                        [3.12654, 3.65423, 1.39089, 0.17322],
                        [3.24796, 3.45725, 1.39089, 0.16637],
                        [3.33957, 3.25539, 1.39089, 0.15937],
                        [3.39516, 3.05015, 1.39089, 0.15288],
                        [3.40844, 2.84461, 1.39089, 0.14808],
                        [3.36888, 2.64523, 1.50469, 0.13509],
                        [3.28524, 2.45706, 1.62989, 0.12634],
                        [3.16335, 2.28332, 1.74578, 0.12157],
                        [3.00668, 2.12704, 1.88598, 0.11734],
                        [2.81877, 1.99075, 2.06178, 0.11259],
                        [2.60382, 1.8761, 2.2605, 0.10777],
                        [2.36628, 1.78392, 2.49514, 0.10212],
                        [2.11077, 1.71386, 2.73632, 0.09682],
                        [1.84143, 1.66505, 2.9565, 0.09259],
                        [1.56171, 1.63661, 2.84234, 0.09892],
                        [1.27461, 1.62801, 2.63808, 0.10888],
                        [0.98314, 1.63924, 2.43521, 0.11978],
                        [0.69088, 1.67005, 2.23272, 0.13162],
                        [0.4026, 1.7216, 1.99677, 0.14666],
                        [0.12422, 1.79393, 1.78795, 0.16087],
                        [-0.13836, 1.88691, 1.58396, 0.17586],
                        [-0.38052, 1.99992, 1.58396, 0.16871],
                        [-0.59883, 2.13222, 1.58396, 0.16115],
                        [-0.79025, 2.2832, 1.58396, 0.15392],
                        [-0.95036, 2.45304, 1.58396, 0.14736],
                        [-1.07383, 2.64173, 1.58396, 0.14236],
                        [-1.15207, 2.84963, 1.76975, 0.12552],
                        [-1.19331, 3.07059, 2.03514, 0.11045],
                        [-1.20472, 3.30075, 2.38132, 0.09677],
                        [-1.19246, 3.53745, 2.25423, 0.10515],
                        [-1.16263, 3.77862, 1.99256, 0.12195],
                        [-1.12128, 4.02437, 1.71875, 0.145],
                        [-1.09468, 4.27143, 1.70696, 0.14557],
                        [-1.0868, 4.51358, 1.50618, 0.16085],
                        [-1.10058, 4.74728, 1.46042, 0.1603],
                        [-1.13873, 4.96955, 1.46042, 0.15442],
                        [-1.20435, 5.17657, 1.46042, 0.14871],
                        [-1.30194, 5.36196, 1.46042, 0.14345],
                        [-1.42764, 5.5241, 1.46042, 0.14048],
                        [-1.58485, 5.65373, 1.46042, 0.13952],
                        [-1.77036, 5.74403, 1.6079, 0.12832],
                        [-1.97521, 5.79724, 1.75023, 0.12092],
                        [-2.19341, 5.81504, 1.8989, 0.11529],
                        [-2.42032, 5.79896, 2.08994, 0.10885],
                        [-2.65202, 5.75169, 2.25676, 0.10478],
                        [-2.88552, 5.67494, 2.45442, 0.10014],
                        [-3.11834, 5.57106, 2.68724, 0.09487],
                        [-3.34855, 5.44296, 2.95367, 0.08919],
                        [-3.5748, 5.29373, 3.25032, 0.08339],
                        [-3.79629, 5.12647, 3.52332, 0.07877],
                        [-4.01239, 4.94361, 3.92498, 0.07213],
                        [-4.22311, 4.7482, 4.0, 0.07185],
                        [-4.42839, 4.54234, 4.0, 0.07268],
                        [-4.62821, 4.32779, 4.0, 0.0733],
                        [-4.82252, 4.10599, 4.0, 0.07372],
                        [-5.01125, 3.87809, 4.0, 0.07397],
                        [-5.19426, 3.64499, 4.0, 0.07409],
                        [-5.37137, 3.40738, 4.0, 0.07409],
                        [-5.54234, 3.16576, 4.0, 0.074],
                        [-5.70687, 2.92052, 4.0, 0.07383],
                        [-5.8646, 2.67193, 4.0, 0.0736],
                        [-6.01512, 2.42019, 4.0, 0.07333],
                        [-6.15795, 2.16548, 4.0, 0.07301],
                        [-6.29262, 1.90796, 4.0, 0.07265],
                        [-6.41863, 1.64779, 4.0, 0.07227],
                        [-6.53548, 1.38517, 4.0, 0.07186],
                        [-6.64268, 1.12029, 4.0, 0.07144],
                        [-6.73978, 0.85338, 4.0, 0.07101],
                        [-6.82626, 0.58466, 4.0, 0.07057],
                        [-6.90177, 0.3144, 3.85995, 0.0727],
                        [-6.96624, 0.04288, 3.58316, 0.07788],
                        [-7.01996, -0.22958, 3.35165, 0.08286],
                        [-7.06352, -0.50269, 2.98957, 0.09251],
                        [-7.09669, -0.77624, 2.61754, 0.10527],
                        [-7.11876, -1.04998, 2.61754, 0.10492],
                        [-7.12841, -1.32358, 2.61754, 0.10459],
                        [-7.12376, -1.59656, 2.61754, 0.1043],
                        [-7.1029, -1.86824, 2.61754, 0.1041],
                        [-7.06181, -2.13735, 2.61754, 0.104],
                        [-6.99468, -2.40124, 2.66511, 0.10217],
                        [-6.90301, -2.65773, 3.02096, 0.09016],
                        [-6.79279, -2.90681, 3.24145, 0.08403],
                        [-6.66693, -3.14842, 3.4993, 0.07785],
                        [-6.528, -3.3829, 3.64969, 0.07468],
                        [-6.37734, -3.61029, 3.45447, 0.07896],
                        [-6.21597, -3.83062, 3.13443, 0.08713],
                        [-6.0447, -4.04388, 2.86032, 0.09562],
                        [-5.86404, -4.24988, 2.86032, 0.09579],
                        [-5.674, -4.44806, 2.86032, 0.09599],
                        [-5.47433, -4.63752, 2.86032, 0.09623],
                        [-5.26355, -4.81594, 2.86032, 0.09655],
                        [-5.03999, -4.98006, 2.86032, 0.09696],
                        [-4.80219, -5.12578, 3.28809, 0.08482],
                        [-4.5543, -5.25681, 3.56849, 0.07857],
                        [-4.29814, -5.37492, 3.86622, 0.07296],
                        [-4.03514, -5.48165, 4.0, 0.07096],
                        [-3.76658, -5.5785, 4.0, 0.07137],
                        [-3.49335, -5.66632, 4.0, 0.07175],
                        [-3.21626, -5.74589, 4.0, 0.07207],
                        [-2.93598, -5.81769, 4.0, 0.07233],
                        [-2.65313, -5.88206, 4.0, 0.07252],
                        [-2.3682, -5.93911, 4.0, 0.07264],
                        [-2.0817, -5.98885, 4.0, 0.0727],
                        [-1.7941, -6.0312, 4.0, 0.07268],
                        [-1.50586, -6.06603, 4.0, 0.07258],
                        [-1.21743, -6.09316, 4.0, 0.07243],
                        [-0.92928, -6.11214, 4.0, 0.07219],
                        [-0.64178, -6.12328, 4.0, 0.07193],
                        [-0.35534, -6.12621, 4.0, 0.07161],
                        [-0.07035, -6.12067, 4.0, 0.07126],
                        [0.21283, -6.10643, 4.0, 0.07089],
                        [0.49386, -6.08337, 4.0, 0.07049],
                        [0.77254, -6.05178, 4.0, 0.07011],
                        [1.0487, -6.01195, 3.79706, 0.07348],
                        [1.32221, -5.96418, 3.44861, 0.08051],
                        [1.59254, -5.90768, 3.12109, 0.08849],
                        [1.8588, -5.84116, 2.79254, 0.09828],
                        [2.12095, -5.76557, 2.49932, 0.10916],
                        [2.37818, -5.68016, 2.21896, 0.12215],
                        [2.62924, -5.58376, 1.92794, 0.13949],
                        [2.87222, -5.47472, 1.70176, 0.1565],
                        [3.10444, -5.35128, 1.48694, 0.17687],
                        [3.32201, -5.21161, 1.48694, 0.17387],
                        [3.51973, -5.05459, 1.48694, 0.1698],
                        [3.69075, -4.88021, 1.4433, 0.16923],
                        [3.82578, -4.69022, 1.34078, 0.17384],
                        [3.91663, -4.48972, 1.34078, 0.16418],
                        [3.95527, -4.28618, 1.34078, 0.15451],
                        [3.95858, -4.0853, 1.34078, 0.14985],
                        [3.92535, -3.89032, 1.34078, 0.14752],
                        [3.84735, -3.70742, 1.34078, 0.1483],
                        [3.71738, -3.54695, 1.62755, 0.12688],
                        [3.551, -3.4086, 1.79424, 0.1206],
                        [3.35298, -3.29424, 2.01971, 0.11322],
                        [3.12868, -3.20411, 2.29112, 0.10551],
                        [2.88325, -3.13725, 2.60582, 0.09762],
                        [2.6213, -3.09178, 2.97184, 0.08946],
                        [2.34684, -3.06519, 3.40739, 0.08093],
                        [2.0632, -3.05458, 3.9156, 0.07249],
                        [1.77299, -3.05707, 4.0, 0.07256],
                        [1.47838, -3.06909, 4.0, 0.07371],
                        [1.17878, -3.08787, 4.0, 0.07505],
                        [0.87865, -3.10272, 4.0, 0.07512],
                        [0.57852, -3.11412, 4.0, 0.07509],
                        [0.27839, -3.12234, 4.0, 0.07506],
                        [-0.02174, -3.12753, 4.0, 0.07504],
                        [-0.32185, -3.12903, 4.0, 0.07503],
                        [-0.62181, -3.12614, 4.0, 0.07499],
                        [-0.9212, -3.11807, 4.0, 0.07488],
                        [-1.21937, -3.10389, 3.86379, 0.07726],
                        [-1.51547, -3.08274, 3.50522, 0.08469],
                        [-1.80857, -3.05386, 3.2137, 0.09165],
                        [-2.09758, -3.01628, 2.9055, 0.10031],
                        [-2.38125, -2.96902, 2.62297, 0.10964],
                        [-2.6582, -2.91113, 2.34669, 0.12057],
                        [-2.92708, -2.84186, 2.09593, 0.13247],
                        [-3.18582, -2.75982, 1.86023, 0.14592],
                        [-3.43233, -2.664, 1.63892, 0.16137],
                        [-3.66385, -2.55315, 1.40944, 0.18212],
                        [-3.87717, -2.42623, 1.40944, 0.17612],
                        [-4.06828, -2.28234, 1.40944, 0.16973],
                        [-4.23236, -2.1211, 1.40944, 0.16322],
                        [-4.36336, -1.9429, 1.40944, 0.15692],
                        [-4.45321, -1.74955, 1.40944, 0.15127],
                        [-4.48914, -1.54636, 1.4245, 0.14485],
                        [-4.47433, -1.34415, 1.49977, 0.13519],
                        [-4.418, -1.14946, 1.49977, 0.13514],
                        [-4.31834, -0.96925, 1.69391, 0.12157],
                        [-4.18486, -0.80548, 1.81971, 0.1161],
                        [-4.02154, -0.6601, 1.96725, 0.11115],
                        [-3.83196, -0.53434, 2.16336, 0.10516],
                        [-3.61994, -0.4283, 2.36029, 0.10044],
                        [-3.3885, -0.34197, 2.58913, 0.09541],
                        [-3.1406, -0.27477, 2.8619, 0.08975],
                        [-2.87915, -0.22548, 3.14823, 0.08451],
                        [-2.60666, -0.1928, 3.52471, 0.07786],
                        [-2.32569, -0.17467, 3.97766, 0.07078],
                        [-2.03843, -0.16885, 4.0, 0.07183],
                        [-1.74672, -0.17299, 4.0, 0.07294],
                        [-1.45191, -0.18508, 4.0, 0.07376],
                        [-1.15497, -0.20355, 4.0, 0.07438],
                        [-0.85671, -0.22676, 4.0, 0.07479],
                        [-0.55769, -0.25328, 4.0, 0.07505],
                        [-0.25827, -0.2819, 4.0, 0.0752],
                        [0.04133, -0.31156, 4.0, 0.07527],
                        [0.34089, -0.34049, 4.0, 0.07524]]

        ################## INPUT PARAMETERS ###################

        # Read all input parameters
        all_wheels_on_track = params['all_wheels_on_track']
        x = params['x']
        y = params['y']
        distance_from_center = params['distance_from_center']
        is_left_of_center = params['is_left_of_center']
        heading = params['heading']
        progress = params['progress']
        steps = params['steps']
        speed = params['speed']
        steering_angle = params['steering_angle']
        track_width = params['track_width']
        waypoints = params['waypoints']
        closest_waypoints = params['closest_waypoints']
        is_offtrack = params['is_offtrack']

        ############### OPTIMAL X,Y,SPEED,TIME ################

        # Get closest indexes for racing line (and distances to all points on racing line)
        closest_index, second_closest_index = closest_2_racing_points_index(
            racing_track, [x, y])

        # Get optimal [x, y, speed, time] for closest and second closest index
        optimals = racing_track[closest_index]
        optimals_second = racing_track[second_closest_index]

        # Save first racingpoint of episode for later
        if self.verbose == True:
            self.first_racingpoint_index = 0  # this is just for testing purposes
        if steps == 1:
            self.first_racingpoint_index = closest_index

        ################ REWARD AND PUNISHMENT ################

        ## Define the default reward ##
        reward = 1

        ## Reward if car goes close to optimal racing line ##
        DISTANCE_MULTIPLE = 1
        dist = dist_to_racing_line(optimals[0:2], optimals_second[0:2], [x, y])
        distance_reward = max(1e-3, 1 - (dist / (track_width * 0.5)))
        reward += distance_reward * DISTANCE_MULTIPLE

        ## Reward if speed is close to optimal speed ##
        SPEED_DIFF_NO_REWARD = 1
        SPEED_MULTIPLE = 2
        speed_diff = abs(optimals[2] - speed)
        if speed_diff <= SPEED_DIFF_NO_REWARD:
            # we use quadratic punishment (not linear) bc we're not as confident with the optimal speed
            # so, we do not punish small deviations from optimal speed
            speed_reward = (1 - (speed_diff / (SPEED_DIFF_NO_REWARD)) ** 2) ** 2
        else:
            speed_reward = 0
        reward += speed_reward * SPEED_MULTIPLE

        # Reward if less steps
        REWARD_PER_STEP_FOR_FASTEST_TIME = 1
        STANDARD_TIME = 37
        FASTEST_TIME = 27
        times_list = [row[3] for row in racing_track]
        projected_time = projected_time(self.first_racingpoint_index, closest_index, steps, times_list)
        try:
            steps_prediction = projected_time * 15 + 1
            reward_prediction = max(1e-3, (-REWARD_PER_STEP_FOR_FASTEST_TIME * (FASTEST_TIME) /
                                           (STANDARD_TIME - FASTEST_TIME)) * (
                                                steps_prediction - (STANDARD_TIME * 15 + 1)))
            steps_reward = min(REWARD_PER_STEP_FOR_FASTEST_TIME, reward_prediction / steps_prediction)
        except:
            steps_reward = 0
        reward += steps_reward

        # Zero reward if obviously wrong direction (e.g. spin)
        direction_diff = racing_direction_diff(
            optimals[0:2], optimals_second[0:2], [x, y], heading)
        if direction_diff > 30:
            reward = 1e-3

        # Zero reward of obviously too slow
        speed_diff_zero = optimals[2] - speed
        if speed_diff_zero > 0.5:
            reward = 1e-3

        ## Incentive for finishing the lap in less steps ##
        REWARD_FOR_FASTEST_TIME = 1500  # should be adapted to track length and other rewards
        STANDARD_TIME = 37  # seconds (time that is easily done by model)
        FASTEST_TIME = 27  # seconds (best time of 1st place on the track)
        if progress == 100:
            finish_reward = max(1e-3, (-REWARD_FOR_FASTEST_TIME /
                                       (15 * (STANDARD_TIME - FASTEST_TIME))) * (steps - STANDARD_TIME * 15))
        else:
            finish_reward = 0
        reward += finish_reward

        ## Zero reward if off track ##
        if all_wheels_on_track == False:
            reward = 1e-3

        ####################### VERBOSE #######################

        if self.verbose == True:
            print("Closest index: %i" % closest_index)
            print("Distance to racing line: %f" % dist)
            print("=== Distance reward (w/out multiple): %f ===" % (distance_reward))
            print("Optimal speed: %f" % optimals[2])
            print("Speed difference: %f" % speed_diff)
            print("=== Speed reward (w/out multiple): %f ===" % speed_reward)
            print("Direction difference: %f" % direction_diff)
            print("Predicted time: %f" % projected_time)
            print("=== Steps reward: %f ===" % steps_reward)
            print("=== Finish reward: %f ===" % finish_reward)

        #################### RETURN REWARD ####################

        # Always return a float value
        return float(reward)


reward_object = Reward()  # add parameter verbose=True to get noisy output for testing


def reward_function(params):
    return reward_object.reward_function(params)
